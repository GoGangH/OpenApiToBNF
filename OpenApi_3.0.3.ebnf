#Format
## OpenAPI 사양을 준수하는 OpenAPI 문서는 그 자체로 JSON 또는 YAML 형식으로 표시될 수 있는 JSON 개체입니다.
OpenApiDocFormat := "JSON" | "YAML"
OpenApiObjType := "JSON"

#OAS dataType
OASType := Integer | Number | String | Boolean

Integer := "int32" | "int64"
Number := "float" | "double"
String := "string" | "binary" | "data" | "date-time" | "password"

#OpenApi Document Object
OpenApiDocObj := OpenApiField InfoField PathsField [ ServersField ComponentsField SecurityField TagsField ExternalDocsField ]

OpenApiField := <STRING> "=" "OpenAPI Specification version"
InfoField := InfoFieldObj "=" "Provides metadata about the API"
PathsField := "/{path}" PathItemObj
ServersField := "url" [ "description" ServersMap ]
ComponentsField := [ schemas responses parameters examples requestBodies headers securitySchemes links callbacks ]
SecurityField := "{}" | SecurityObj #
TagsField := TagsObj #
ExternalDocsField := externalDocsObj #

PathItemObj := [ "$ref" "summary" "description" OperationList ServersField Parameters ]

ServersMap := Map["string", ServersVariables]
ServersVariables := "enum" [ "default" ] "description"

InfoFieldObj := "title" [ "description" "termsOfService" ContactObj LicenseObj ] "version"
ReferenceObj := "$ref"
OperationObj := [ "tags" "summary" "description" externalDocs "operationId" parameters requestBody ] responses [ callbacks "deprecated" security servers ] #
externalDocsObj := "url" [ "description" ]
ParamObj := "name" in [ "description" ] "required" [ "deprecated" "allowEmptyValue" ] #
ContactObj := [ "name" "url" "email" ]
LicenseObj := "name" [ "url" ]

in := "query" | "header" | "path" | "cookie"

OperationList := "get" | "put" | "post" | "delete" | "options" | "head" | "patch" | "trace"
Parameters := ParamObj ReferenceObj





ex)
TypesDef := RecordTypeDef*
RecordTypeDef := Annotation* "record" Name "{" RecordDef* "}"
RecordDef := FieldDef | EnumDef
FieldDef := Annotation* Type Name ";"
EnumDef := "enum" "{" FieldDef* "}"
Type := PrimitiveType | RecordType | ArrayType | TypeRef
PrimitiveType := "string" | "int" | "long" | "double" | "decimal"
RecordType := "record" "{" RecordDef* "}"
ArrayType := "array" "<" Type ">"
Annotation := "@" Name [ "(" NameValueList ")" ]
NameValueList := NameValue ( "," NameValue)*
NameValue := Name "=" Value
Name := <IDENT>
TypeRef := <IDENT>
Value := <STRING> | <NUMBER>